// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  username  String
  password String
  role Role 
  verified Int @default(0)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 
  deletedAt DateTime?

  address Address[]
  transaction Transaction[]

  @@map("users")
}

model Product {
  id  Int @id @default(autoincrement())
  name  String 
  price Int
  stocks Int
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 
  deletedAt DateTime?

  productImage ProductImage[]
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@map("products")
}

model ProductImage{
  id  Int @id @default(autoincrement())
  url String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 
  deletedAt DateTime?

  product Product @relation(fields: [productsId], references: [id])
  productsId Int

  @@map("product_images")
}

model Address{
   id  Int @id @default(autoincrement())
   receiver String
   phoneNumber String 
   address String 
   createdAt DateTime @default(now()) 
   updatedAt DateTime @default(now()) 
   deletedAt DateTime?
   
   user User @relation(fields: [usersId], references: [id])
   usersId String

   @@map("addresses")
}

model Category{
   id  Int @id @default(autoincrement())
   name String
   createdAt DateTime @default(now()) 
   updatedAt DateTime @default(now()) 
   deletedAt DateTime?
   
   product Product []

   @@map("categories")
}

enum Role {
  USER
  SUPER_ADMIN
  ADMIN
}

model Transaction{
  id Int @id @default(autoincrement())
  total String 
  expiredAt DateTime

  usersId String
  user User @relation(fields: [usersId], references: [id])

  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 
  deletedAt DateTime?

  transactionStatus TransactionStatus[]
  transactionItem TransactionItem[]

  @@map("transactions")
}

model TransactionItem{
  id Int @id @default(autoincrement())
  productName String 
  quantity Int 
  price Int 
  transactionsId Int 
  transaction Transaction @relation(fields: [transactionsId], references: [id])

  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now()) 
  deletedAt DateTime?

  @@map("transaction_items")
}

model TransactionStatus{
  id Int @id @default(autoincrement())
  status Status
  transactionsId Int 
  transaction Transaction @relation(fields: [transactionsId], references: [id])
  createdAt DateTime @default(now())

  @@map("transaction_statuses") 
}

enum Status{
  WAITING_FOR_PAYMENT
  PAID
  CANCELLED
  EXPIRED
}